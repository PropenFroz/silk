# stages:
#   - build
#   - test
#   - deploy

# cache:
#   paths:
#     - .m2/repository
#     - target

# variables:
#   MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

# maven_build:
#   stage: build
#   script:
#     - mvn clean install

# deploy_to_supabase:
#   stage: deploy
#   script:
#     - supabase deploy --key $SUPABASE_KEY --url $SUPABASE_URL

# deploy_to_vercel:
#   stage: deploy
#   script:
#     - vercel --token $VERCEL_TOKEN --prod


# variables:
#   APP_NAME_FRONTEND: <YOUR FRONTEND APP NAME>
#   APP_NAME_BACKEND: <YOUR BACKEND APP NAME>

# stages:
#   - build
#   - deploy

# Build-Deploy-Frontend-to-Heroku:
#   stage: build
#   image: docker:latest
#   services:
#     - docker:dind
#   only:
#     - master
#   script:
#     - echo "Deploying Frontend..."
#     - docker login -u _ -p $HEROKU_API_KEY registry.heroku.com
#     - docker build --file=frontend/frontend.dockerfile --rm=true -t registry.heroku.com/$APP_NAME_FRONTEND/web .
#     - docker push registry.heroku.com/$APP_NAME_FRONTEND/web
#     - docker run -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli:latest container:release web -a $APP_NAME_FRONTEND
#     - echo "Frontend Deployment Complete!"

# Build-Backend:
#   stage: build
#   image: gradle:6.0.1-jdk13
#   before_script:
#     - export GRADLE_USER_HOME=`pwd`/backend/.gradle
#   script:
#     - echo "Building Backend..."
#     - cd ./backend
#     - gradle build
#     - echo "Backend Build Complete!"
#   cache:
#     key: "$CI_COMMIT_SHA"
#     policy: push
#     paths:
#       - backend/build
#   artifacts:
#     paths:
#       - backend/build/libs/*.jar
#     expire_in: 1 week
#   only:
#     - master

# Deploy-Backend-to-Heroku:
#   stage: deploy
#   image: docker:latest
#   services:
#     - docker:dind
#   only:
#     - master
#   script:
#     - echo "Deploying Backend..."
#     - docker login -u _ -p $HEROKU_API_KEY registry.heroku.com
#     - docker build --file=backend/backend.dockerfile --rm=true -t registry.heroku.com/$APP_NAME_BACKEND/web .
#     - docker push registry.heroku.com/$APP_NAME_BACKEND/web
#     - docker run -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli:latest container:release web -a $APP_NAME_BACKEND
#     - echo "Backend Deployment Complete!"

default:
  tags:
    - apap

stages:
  - build
  - deploy

variables:
  RAILWAY_PROJECT: 28697091-6c52-4df8-86ed-2c40583a30f5
  RAILWAY_API_KEY: 8141d166-992b-4003-96ec-1337158c1808

build:
  stage: build
  script:
    - mvn clean install
  only:
    - main

deploy:
  stage: deploy
  image: docker:latest
  script:
    - CONTAINER_ID=$(docker run -d node:latest sh)
    - docker exec $CONTAINER_ID npm install -g @railway/cli
    - docker exec $CONTAINER_ID railway login --apiKey $RAILWAY_API_KEY
    - docker exec $CONTAINER_ID railway up --service silk --project $RAILWAY_PROJECT

    # - npm install -g @railway/cli
    # - railway login --apiKey $RAILWAY_API_KEY
    # - railway up --service silk --project $RAILWAY_PROJECT
  only:
    - main
  environment:
    name: production

    # deploy:
#   stage: deploy
#   image: ubuntu
#   script:
#     - apt-get update && apt-get install -y curl
#     - curl -fsSL https://railway.app/install.sh | sh
#     - railway login --apiKey $RAILWAY_API_KEY
#     - railway up --service silk --project $RAILWAY_PROJECT
#   only:
#     - main
#   environment:
#     name: production

# deploy:
#   stage: deploy
#   image: alpine:latest
#   script:
#     # - apk add --no-cache curl
#     - curl -fsSL https://railway.app/install.sh | sh
#     - railway login --apiKey $RAILWAY_API_KEY
#     - railway up --service silk --project $RAILWAY_PROJECT
#   only:
#     - main
#   environment:
#     name: production

